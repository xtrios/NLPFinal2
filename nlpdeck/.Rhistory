cor(mtcars)
print(xtable(cor(mtcars)))
library(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(mtcars,type="lower")
M<-cor(mtcars)
corrplot(M,type="lower")
print(M)
M[,1]
sort(M[,1])
?abs
sort(abs(M[,1])
)
sort(-abs(M[,1])
)
?sort
M<-cor(mtcars)
sort(M[,1])
corrplot(M,type="lower")
head(sort(M[,1]),"decreasing")
head(sortabs((M[,1]),"decreasing")
)
head(sort(abs((M[,1])(),"decreasing")
()
)
)
head(sort(abs(M[,1])),"decreasing")
?SORT
?sort
head(sort(abs(M[,1])),decreasing=FALSE,5)
head(sort(abs(M[,1])),decreasing=FALSE,-5)
head(sort(abs(M[,1])),decreasing=TRUE,5)
head(sort(abs(M[,1])),increasing,5)
head(sort(abs(M[,1])),decreasing=FALSE,5)
tail(sort(abs(M[,1])),5)
corrplot(M,type="lower")
M
fit1<-lm(mpg~cyl,data = mtcars)
fit1
summary(fit1)
summary(lm(mpg~cyl, mtcars))$adj.r.squared
?seq
seq(4)
model<-data.frame(seq(6),seq(6))
model
model<-data.frame(seq(6),seq(6))
names(model)<-c("MODEL","Adj. R-Squared")
model
model$rsquared<-summary(lm(mpg~cyl, mtcars))$adj.r.squared
model
model$Rsquared(1)<-summary(lm(mpg~cyl, mtcars))$adj.r.squared
model<-data.frame(seq(6),seq(6))
names(model)<-c("model","Rsquared")
model$Rsquared[1]<-summary(lm(mpg~cyl, mtcars))$adj.r.squared
model
model<-data.frame(seq(6),seq(6))
names(model)<-c("Model","Rsquared")
model$Rsquared[1]<-summary(lm(mpg~cyl, mtcars))$adj.r.squared
model$Variables[1]<-"cyl"
model$Rsquared[2]<-summary(lm(mpg~disp, mtcars))$adj.r.squared
model
model<-data.frame(seq(7),seq(7))
names(model)<-c("Model","Rsquared")
model$Variables<-c("cyl","disp","wt","cyl+disp","cyl+wt","disp+wt","cyl+disp+wt")
model$Rsquared[1]<-summary(lm(mpg~cyl, mtcars))$adj.r.squared
model$Rsquared[2]<-summary(lm(mpg~disp, mtcars))$adj.r.squared
model$Rsquared[3]<-summary(lm(mpg~wt, mtcars))$adj.r.squared
model$Rsquared[4]<-summary(lm(mpg~cyl+disp, mtcars))$adj.r.squared
model$Rsquared[5]<-summary(lm(mpg~cyl+wt, mtcars))$adj.r.squared
model$Rsquared[6]<-summary(lm(mpg~disp+wt, mtcars))$adj.r.squared
model$Rsquared[7]<-summary(lm(mpg~cyl+disp+wt, mtcars))$adj.r.squared
model
model
step(lm(data = mtcars, mpg ~ .), trace=0)
?step
M<-cor(mtcars)
tail(sort(abs(M[,1])),5)
corrplot(M,type="lower")
?boxplot
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, ylab="Fuel Efficiency (mpg)",xlab=" Transmission type", main="Fuel efficiency based on transmission type")
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type", main="Fuel efficiency based on transmission type")
gend("topleft", inset = 0.05, title = "Transmission type", c("automatic",
"manual"), fill = terrain.colors(2), horiz = TRUE)
legend("topleft", inset = 0.05, title = "Transmission type", c("automatic",
"manual"), fill = terrain.colors(3), horiz = TRUE)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
title(main = "Fuel efficiency based on transmission type")
legend("topleft", inset = 0.05, title = "Transmission type", c("automatic",
"manual"), fill = terrain.colors(3), horiz = TRUE)
par(mfrow = c(2,2))
plot(bestmodel)
par(mfrow = c(2,2))
plot(best.model)
best.model<-step(lm(data = mtcars, mpg ~ .), trace=0)
par(mfrow = c(2,2))
plot(best.model)
best.model<-step(lm(data = mtcars, mpg ~ .), trace=0)
summary(best.model)
```
best.model<-step(lm(data = mtcars, mpg ~ .), trace=0)
summary(best.model)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
title(main = "Fuel efficiency based on transmission type")
legend("topleft", inset = 0.05, title = "Transmission type", fill = terrain.colors(3), horiz = TRUE)
names = c("Automatic", "Manual"))
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
title(main = "Fuel efficiency based on transmission type")
legend("topleft", inset = 0.05, title = "Transmission type", fill = terrain.colors(3), horiz = TRUE)
names = c("Automatic", "Manual")
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
names = c("Automatic", "Manual"))
title(main = "Fuel efficiency based on transmission type")
legend("topleft", inset = 0.05, title = "Transmission type", c("Automatic","Manual"), fill = terrain.colors(3), horiz = TRUE)
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
boxplot(mtcars$mpg ~ mtcars$am, data = mtcars, col = terrain.colors(3), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
boxplot(mtcars$mpg~mtcars$am,mtcars, ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
names = c("Automatic", "Manual")
boxplot(mtcars$mpg~mtcars$am,mtcars, names = c("Automatic", "Manual"), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
boxplot(mtcars$mpg~mtcars$am,mtcars, names = c("Automatic", "Manual"), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
title(main = "Fuel efficiency based on transmission type")
legend("topleft", inset = 0.05, title = "Transmission type", c("Automatic","Manual"), fill = terrain.colors(3), horiz = TRUE)
boxplot(mtcars$mpg~mtcars$am,mtcars, col = terrain.colors(3), names = c("Automatic", "Manual"), ylab="Fuel Efficiency (mpg)",xlab=" Transmission type")
title(main = "Fuel efficiency based on transmission type")
legend("topleft", inset = 0.05, title = "Transmission type", c("Automatic","Manual"), fill = terrain.colors(3), horiz = TRUE)
M<-cor(mtcars)
tail(sort(abs(M[,1])),5)
corrplot(M,type="lower")
title("Figure 1: Visual Correlation Matrix")
par(mfrow = c(2,2))
plot(best.model)
title("Figure 3: Residual Plots from Model")
text(0.5,0.5,"Figure 3: Residual Plots from Model",cex=2,font=2)
par(mfrow = c(2,2))
plot(best.model)
text(0.5,0.5,"Figure 3: Residual Plots from Model",cex=2,font=2)
text(-0.5,0.5,"Figure 3: Residual Plots from Model",cex=2,font=2)
text(0,0,"Figure 3: Residual Plots from Model",cex=2,font=2)
Title("My 'Title' in a strange place", side = 3, line = -21, outer = TRUE)
title("My 'Title' in a strange place", side = 3, line = -21, outer = TRUE)
title("My 'Title' in a strange place", line = -41, outer = TRUE)
title("My 'Title' in a strange place", line = 01, outer = TRUE)
title("My 'Title' in a strange place", line = -10, outer = TRUE)
title("My 'Title' in a strange place", line = -5, outer = TRUE)
title("My 'Title' in a strange place", line = 0, outer = TRUE)
title("My 'Title' in a strange place", line = -2, outer = TRUE)
title("My 'Title' in a strange place", line = -2, outer = TRUE, cex.main=3)
title("My 'Title' in a strange place", line = -2, outer = TRUE, cex.main=2)
title("My 'Title' in a strange place", line = -2, outer = TRUE, cex.main=2.5)
?corrplot
?mtcars
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(NEI_nonpoint)
summary(testing)
size(testing)
length(testing)
length(training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
predData[1,c(103,50,85)]=c(23000,10,2)
predData
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
imps
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
imps
varImp
fit
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
install.packages("randomForest")
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
?randomForest
library(randomForest)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
imps
order(imps)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
?dTable
install.packages(rCharts)
install.packages("rCharts")
?dTable
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
head(airquality)
?DTable
?dtable
library(rCharts)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h2('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
install.packages("devtools")
install.github('slidify','ramnathv')
install_github('slidify','ramnathv')
install.packages("github")
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
train<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
head(train)
?train
dim(train)
head(train$classe)
table(train$classe)
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
list.files(pattern="d120*.txt")
list.files(pattern=".txt")
?list.files
list.files
list.files(".")
setwd("D:/Dropbox/Work (IMRE)/Spectrometer Data/20140523")
list.files(".")
list.files(".txt")
list.files("*.txt")
list.files(".txt")
setwd("D:/Dropbox/Work (IMRE)/Spectrometer Data/20140523/d120pvar")
tmp2<-read.csv("d120pvar_1.txt")
tmp2
tmp2<-read.table("d120pvar_1.txt")
?read.table
tmp2<-read.table("d120pvar_1.txt", sep="\t")
x <- read.table(text = txt, sep = "|", header = TRUE, stringsAsFactors = FALSE)
x <- read.table(text = "d120pvar_1.txt, sep = "|", header = TRUE, stringsAsFactors = FALSE)
x <- read.table(text = "d120pvar_1.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
x
x <- read.table(text = "d120pvar_1.txt", sep = "\t", header = TRUE)
x <- read.table(text = "d120pvar_1.txt", sep = "\t")
x <- read.table("d120pvar_1.txt", sep = "\t")
x <- read.table("d120pvar_1.txt", sep = "\t", skip = 3)
x
x <- read.table("d120pvar_1.txt", sep = "\t", skip = 2)
head(x)
x <- read.table("d120pvar_1.txt", sep = "\t", skip = 1)
head(x)
read.table(temp[i], sep = "\t", skip = 2))
for (i in 1:length(temp)) assign(temp[i], read.table(temp[i], sep = "\t", skip = 2))
temp
temp = list.files(pattern=".txt")
for (i in 1:length(temp)) assign(temp[i], read.table(temp[i], sep = "\t", skip = 2))
d120pvar_1.txt
train<-read.csv("pml-training.csv")
setwd("D:/Dropbox/Coursera")
train<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
library(randomForest)
library(caret)
set.seed(23456)
im(train)
dim(train)
dim(test)
table(train$classe)
trainset<-createDataPartition(train$classe, p=0.8, list=FALSE)
?createDataPartition
head(trainset)
head train
head(train)
?read.csv
head(train)
traindata <- train[, which(as.numeric(colSums(is.na(train)))==0)]
nearZeroCol <- nearZeroVar(traindata, saveMetrics = TRUE)
traindata <- traindata[, nearZeroCol$nzv==FALSE]
traindata <- traindata[,-(1:7)]
head(traindata)
dim(traindata)
dim(train)
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- training[trainset,]
validateP <- training[-trainset,]
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- traindata[trainset,]
validateP <- traindata[-trainset,]
modelFit <- train(classe ~ ., data = trainRed, method="rf",importance=TRUE)
modelFit <- train(classe ~ ., data = trainmodel_rf <- train(classe ~ .,  method="rf", data=trainP)    , method="rf",importance=TRUE)
library(randomForest)
library(caret)
modelFit <- train(classe ~ ., data = trainmodel_rf <- train(classe ~ .,  method="rf", data=trainP)    , method="rf",importance=TRUE)
install.packages(c("BH", "car", "colorspace", "digest", "dplyr", "ggplot2", "httr", "KernSmooth", "knitr", "lazyeval", "manipulate", "quantmod", "Rcpp", "rmarkdown", "swirl", "zoo"))
model_rf <- train(classe ~ .,  method="rf", data=trainP)
install.packages('caret',dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
View(`d120pvar_12.txt`)
install.packages("caret", dependencies = TRUE)
library(randomForest)
library(caret)
model_rf <- train(classe ~ .,  method="rf", data=trainP)
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- traindata[trainset,]
validateP <- traindata[-trainset,]
?train
library(caret)
install.packages(c("ggplot2", "manipulate"))
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- traindata[trainset,]
validateP <- traindata[-trainset,]
library(caret)
library(randomForest)
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- traindata[trainset,]
validateP <- traindata[-trainset,]
require(caret)
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- traindata[trainset,]
validateP <- traindata[-trainset,]
install.packages("ggplot2",dependencies="TRUE")
install.packages("ggplot2", dependencies = TRUE)
trainset <- createDataPartition(traindata$classe, p = 0.6, list = FALSE)
trainP <- traindata[trainset,]
validateP <- traindata[-trainset,]
require(caret)
install.packages("e1071")
library(caret)
library(ggplot2)
head(corpus)
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
shiny::runApp('final/en_US/FinalProj')
install.packages('stringr')
devtools::install_github('muschellij2/slidify')
setwd("D:/Dropbox/Coursera/final/en_US/FinalProj/nlpdeck")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
